// Code generated by MockGen. DO NOT EDIT.
// Source: arp.go

// Package arp is a generated GoMock package.
package arp

import (
	reflect "reflect"

	mw "github.com/42milez/ProtocolStack/src/mw"
	gomock "github.com/golang/mock/gomock"
)

// MockIResolver is a mock of IResolver interface.
type MockIResolver struct {
	ctrl     *gomock.Controller
	recorder *MockIResolverMockRecorder
}

// MockIResolverMockRecorder is the mock recorder for MockIResolver.
type MockIResolverMockRecorder struct {
	mock *MockIResolver
}

// NewMockIResolver creates a new mock instance.
func NewMockIResolver(ctrl *gomock.Controller) *MockIResolver {
	mock := &MockIResolver{ctrl: ctrl}
	mock.recorder = &MockIResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResolver) EXPECT() *MockIResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockIResolver) Resolve(iface *mw.Iface, ip mw.IP) (mw.EthAddr, Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", iface, ip)
	ret0, _ := ret[0].(mw.EthAddr)
	ret1, _ := ret[1].(Status)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockIResolverMockRecorder) Resolve(iface, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockIResolver)(nil).Resolve), iface, ip)
}
