// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/k12n3ud0n/Workspace/ProtocolStack/src/syscall/open.go

// Package mock_syscall is a generated GoMock package.
package mock_syscall

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenSyscallInterface is a mock of OpenSyscallInterface interface.
type MockOpenSyscallInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSyscallInterfaceMockRecorder
}

// MockOpenSyscallInterfaceMockRecorder is the mock recorder for MockOpenSyscallInterface.
type MockOpenSyscallInterfaceMockRecorder struct {
	mock *MockOpenSyscallInterface
}

// NewMockOpenSyscallInterface creates a new mock instance.
func NewMockOpenSyscallInterface(ctrl *gomock.Controller) *MockOpenSyscallInterface {
	mock := &MockOpenSyscallInterface{ctrl: ctrl}
	mock.recorder = &MockOpenSyscallInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenSyscallInterface) EXPECT() *MockOpenSyscallInterfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockOpenSyscallInterface) Exec() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockOpenSyscallInterfaceMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockOpenSyscallInterface)(nil).Exec))
}
