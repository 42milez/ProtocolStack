// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/k12n3ud0n/Workspace/ProtocolStack/src/syscall/close.go

// Package mock_syscall is a generated GoMock package.
package mock_syscall

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCloseSyscallInterface is a mock of CloseSyscallInterface interface.
type MockCloseSyscallInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCloseSyscallInterfaceMockRecorder
}

// MockCloseSyscallInterfaceMockRecorder is the mock recorder for MockCloseSyscallInterface.
type MockCloseSyscallInterfaceMockRecorder struct {
	mock *MockCloseSyscallInterface
}

// NewMockCloseSyscallInterface creates a new mock instance.
func NewMockCloseSyscallInterface(ctrl *gomock.Controller) *MockCloseSyscallInterface {
	mock := &MockCloseSyscallInterface{ctrl: ctrl}
	mock.recorder = &MockCloseSyscallInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloseSyscallInterface) EXPECT() *MockCloseSyscallInterfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockCloseSyscallInterface) Exec() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockCloseSyscallInterfaceMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCloseSyscallInterface)(nil).Exec))
}
