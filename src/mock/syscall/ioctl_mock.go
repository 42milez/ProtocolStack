// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/k12n3ud0n/Workspace/ProtocolStack/src/syscall/ioctl.go

// Package mock_syscall is a generated GoMock package.
package mock_syscall

import (
	reflect "reflect"
	syscall "syscall"

	gomock "github.com/golang/mock/gomock"
)

// MockIoctlSyscallInterface is a mock of IoctlSyscallInterface interface.
type MockIoctlSyscallInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIoctlSyscallInterfaceMockRecorder
}

// MockIoctlSyscallInterfaceMockRecorder is the mock recorder for MockIoctlSyscallInterface.
type MockIoctlSyscallInterfaceMockRecorder struct {
	mock *MockIoctlSyscallInterface
}

// NewMockIoctlSyscallInterface creates a new mock instance.
func NewMockIoctlSyscallInterface(ctrl *gomock.Controller) *MockIoctlSyscallInterface {
	mock := &MockIoctlSyscallInterface{ctrl: ctrl}
	mock.recorder = &MockIoctlSyscallInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoctlSyscallInterface) EXPECT() *MockIoctlSyscallInterfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockIoctlSyscallInterface) Exec() (uintptr, uintptr, syscall.Errno) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(uintptr)
	ret1, _ := ret[1].(uintptr)
	ret2, _ := ret[2].(syscall.Errno)
	return ret0, ret1, ret2
}

// Exec indicates an expected call of Exec.
func (mr *MockIoctlSyscallInterfaceMockRecorder) Exec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIoctlSyscallInterface)(nil).Exec))
}
